«tabulationFunction.h»
#pragma once
#include <iostream>
ref class tabulationFunction
{
	double left, right, step, x;
public:
	double tabulation(double left, double right, double step, double x);
};
«tabulationFunction.cpp»
#include "pch.h"
#include "tabulationFunction.h"

double tabulationFunction::tabulation(double left, double right, double step, double x)
{
	double y;
	y = sqrt(2 * log(x * x) - x);
	return y;
}

«Form1.cpp»
#include "pch.h"
#include "Form1.h"

using namespace System;
using namespace System::Windows::Forms;

[STAThreadAttribute]
void main(array<String^>^ args)
{
	Application::EnableVisualStyles();
	Application::SetCompatibleTextRenderingDefault(false);

	CppCLRWinformsProjekt::Form1 form;
	Application::Run(% form);
}

«Params.h»
#pragma once

ref struct Params
{
	double Left;
	double Right;
	double Step;
};

«Form1.h»
#pragma once
#include "tabulationFunction.h"

namespace CppCLRWinformsProjekt {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for Form1
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			// TODO: Add constructor code here.
			//
		}

	protected:
		/// <summary>
		/// Clean up resources used.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^ button1;
	private: System::Windows::Forms::Label^ label1;
	private: System::Windows::Forms::TextBox^ _leftValueTextBox;
	private: System::Windows::Forms::DataVisualization::Charting::Chart^ _graphChart;

	private: System::Windows::Forms::GroupBox^ groupBox2;

	private: System::Windows::Forms::TextBox^ _stepTextBox;
	private: System::Windows::Forms::TextBox^ _rightValueTextBox;
	private: System::Windows::Forms::Label^ label3;
	private: System::Windows::Forms::Label^ label2;
	private: System::Windows::Forms::Button^ _btnCalculate;
	private: System::Windows::Forms::TextBox^ _valuesTextBox;
	private: Params _params;



	protected:

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// The required method for designer support. 
		/// The content of the method must not be contradicted with the code editor.		
		/// </summary>
		void InitializeComponent(void)
		{
			System::Windows::Forms::DataVisualization::Charting::RectangleAnnotation^ rectangleAnnotation1 = (gcnew System::Windows::Forms::DataVisualization::Charting::RectangleAnnotation());
			System::Windows::Forms::DataVisualization::Charting::ChartArea^ chartArea1 = (gcnew System::Windows::Forms::DataVisualization::Charting::ChartArea());
			System::Windows::Forms::DataVisualization::Charting::Series^ series1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->_leftValueTextBox = (gcnew System::Windows::Forms::TextBox());
			this->_graphChart = (gcnew System::Windows::Forms::DataVisualization::Charting::Chart());
			this->groupBox2 = (gcnew System::Windows::Forms::GroupBox());
			this->_stepTextBox = (gcnew System::Windows::Forms::TextBox());
			this->_rightValueTextBox = (gcnew System::Windows::Forms::TextBox());
			this->label3 = (gcnew System::Windows::Forms::Label());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->_btnCalculate = (gcnew System::Windows::Forms::Button());
			this->_valuesTextBox = (gcnew System::Windows::Forms::TextBox());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->_graphChart))->BeginInit();
			this->groupBox2->SuspendLayout();
			this->SuspendLayout();
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(1189, 662);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(101, 38);
			this->button1->TabIndex = 0;
			this->button1->Text = L"Выход";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &Form1::button1_Click);
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(13, 33);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(120, 17);
			this->label1->TabIndex = 1;
			this->label1->Text = L"Левое значение:";
			// 
			// _leftValueTextBox
			// 
			this->_leftValueTextBox->Location = System::Drawing::Point(159, 30);
			this->_leftValueTextBox->Name = L"_leftValueTextBox";
			this->_leftValueTextBox->Size = System::Drawing::Size(202, 22);
			this->_leftValueTextBox->TabIndex = 2;
			this->_leftValueTextBox->Validating += gcnew System::ComponentModel::CancelEventHandler(this, &Form1::_leftValueTextBox_Validating);
			// 
			// _graphChart
			// 
			rectangleAnnotation1->Name = L"RectangleAnnotation1";
			rectangleAnnotation1->Text = L"RectangleAnnotation1";
			this->_graphChart->Annotations->Add(rectangleAnnotation1);
			chartArea1->Name = L"ChartArea1";
			this->_graphChart->ChartAreas->Add(chartArea1);
			this->_graphChart->Location = System::Drawing::Point(545, 12);
			this->_graphChart->Name = L"_graphChart";
			series1->ChartArea = L"ChartArea1";
			series1->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series1->Name = L"Series1";
			this->_graphChart->Series->Add(series1);
			this->_graphChart->Size = System::Drawing::Size(745, 631);
			this->_graphChart->TabIndex = 3;
			this->_graphChart->TextAntiAliasingQuality = System::Windows::Forms::DataVisualization::Charting::TextAntiAliasingQuality::Normal;
			// 
			// groupBox2
			// 
			this->groupBox2->BackColor = System::Drawing::SystemColors::ButtonHighlight;
			this->groupBox2->Controls->Add(this->_stepTextBox);
			this->groupBox2->Controls->Add(this->_rightValueTextBox);
			this->groupBox2->Controls->Add(this->label3);
			this->groupBox2->Controls->Add(this->label2);
			this->groupBox2->Controls->Add(this->label1);
			this->groupBox2->Controls->Add(this->_leftValueTextBox);
			this->groupBox2->Location = System::Drawing::Point(12, 12);
			this->groupBox2->Name = L"groupBox2";
			this->groupBox2->Size = System::Drawing::Size(431, 225);
			this->groupBox2->TabIndex = 5;
			this->groupBox2->TabStop = false;
			// 
			// _stepTextBox
			// 
			this->_stepTextBox->Location = System::Drawing::Point(159, 164);
			this->_stepTextBox->Name = L"_stepTextBox";
			this->_stepTextBox->Size = System::Drawing::Size(202, 22);
			this->_stepTextBox->TabIndex = 6;
			this->_stepTextBox->Validating += gcnew System::ComponentModel::CancelEventHandler(this, &Form1::_stepTextBox_Validating);
			// 
			// _rightValueTextBox
			// 
			this->_rightValueTextBox->Location = System::Drawing::Point(159, 101);
			this->_rightValueTextBox->Name = L"_rightValueTextBox";
			this->_rightValueTextBox->Size = System::Drawing::Size(202, 22);
			this->_rightValueTextBox->TabIndex = 5;
			this->_rightValueTextBox->Validating += gcnew System::ComponentModel::CancelEventHandler(this, &Form1::_rightValueTextBox_Validating);
			// 
			// label3
			// 
			this->label3->AutoSize = true;
			this->label3->Location = System::Drawing::Point(13, 164);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(36, 17);
			this->label3->TabIndex = 4;
			this->label3->Text = L"Шаг:";
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Location = System::Drawing::Point(13, 101);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(128, 17);
			this->label2->TabIndex = 3;
			this->label2->Text = L"Правое значение:";
			// 
			// _btnCalculate
			// 
			this->_btnCalculate->Location = System::Drawing::Point(1051, 662);
			this->_btnCalculate->Name = L"_btnCalculate";
			this->_btnCalculate->Size = System::Drawing::Size(105, 38);
			this->_btnCalculate->TabIndex = 7;
			this->_btnCalculate->Text = L"Вычислить";
			this->_btnCalculate->UseVisualStyleBackColor = true;
			this->_btnCalculate->Click += gcnew System::EventHandler(this, &Form1::_btnCalculate_Click);
			// 
			// _valuesTextBox
			// 
			this->_valuesTextBox->Location = System::Drawing::Point(12, 305);
			this->_valuesTextBox->Multiline = true;
			this->_valuesTextBox->Name = L"_valuesTextBox";
			this->_valuesTextBox->ReadOnly = true;
			this->_valuesTextBox->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->_valuesTextBox->Size = System::Drawing::Size(431, 338);
			this->_valuesTextBox->TabIndex = 8;
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(8, 16);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1302, 712);
			this->Controls->Add(this->_valuesTextBox);
			this->Controls->Add(this->_btnCalculate);
			this->Controls->Add(this->_graphChart);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->groupBox2);
			this->Name = L"Form1";
			this->Text = L"Form1";
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->_graphChart))->EndInit();
			this->groupBox2->ResumeLayout(false);
			this->groupBox2->PerformLayout();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e) 
	{
		this->Close();
	}
	private: System::Void _btnCalculate_Click(System::Object^ sender, System::EventArgs^ e)
	{
		tabulationFunction func;
		double leftValue, rightValue, step, x, y;
		leftValue = _params.Left;
		rightValue = _params.Right;
		step = _params.Step;

		this->_graphChart->Series[0]->Points->Clear();
		this->_valuesTextBox->Clear();
		for (x = leftValue; x <= rightValue; x += step)
		{
			_valuesTextBox->AppendText("x = " + Convert::ToString(x) + "\ty = " + Convert::ToString(y = func.tabulation(leftValue, rightValue, step, x)) + "\r\n");
			try 
			{
				if (((2 * log(x * x) - x) >= 0) || (x != 0))
				{
					_graphChart->Series["Series1"]->Points->AddXY(x, y = func.tabulation(leftValue, rightValue, step, x));
				}
				if (((2 * log(x * x) - x) < 0) || (x == 0))
				{
					throw - y;
				}
			}
			catch (double y) 
			{
				_valuesTextBox->AppendText("Функция не существует" + "\r\n");
			}
		}
	}

private: System::Void _stepTextBox_Validating(System::Object^ sender, System::ComponentModel::CancelEventArgs^ e) {
	TextBox^ tb = (TextBox^)sender;
	double step = 0;
	e->Cancel = !Double::TryParse(_stepTextBox->Text, step);
	if (e->Cancel)
	{
		MessageBox::Show("Wrong step value!");
		tb->BackColor = Color::Red;
		return;
	}

	if (step <= 0)
	{
		tb->BackColor = Color::Red;
		MessageBox::Show("Step should be greater then zero.");
		e->Cancel = true;
		return;
	}

	tb->BackColor = Color::White;
	
	_params.Step = step;
}
private: System::Void _leftValueTextBox_Validating(System::Object^ sender, System::ComponentModel::CancelEventArgs^ e) {
	TextBox^ tb = (TextBox^)sender;
	double left;
	e->Cancel = !Double::TryParse(_leftValueTextBox->Text, left);

	if (e->Cancel)
	{
		tb->BackColor = Color::Red;
		MessageBox::Show("Wrong left value!");
		return;
	}

	double right;
	if (!String::IsNullOrWhiteSpace(_rightValueTextBox->Text) && Double::TryParse(_rightValueTextBox->Text, right))
	{
		if (left >= right)
		{
			e->Cancel = true;
			tb->BackColor = Color::Red;
			MessageBox::Show("Right value less then left value!");
			return;
		}
	}
	tb->BackColor = Color::White;

	_params.Left = left;
}

private: System::Void _rightValueTextBox_Validating(System::Object^ sender, System::ComponentModel::CancelEventArgs^ e) {
	TextBox^ tb = (TextBox^)sender;
	double right;
	e->Cancel = !Double::TryParse(_rightValueTextBox->Text, right);

	if (e->Cancel)
	{
		tb->BackColor = Color::Red;
		MessageBox::Show("Wrong right value!");
		return;
	}

	double left;
	if (!String::IsNullOrWhiteSpace(_leftValueTextBox->Text) && Double::TryParse(_leftValueTextBox->Text, left))
	{
		if (left >= right)
		{
			e->Cancel = true;
			tb->BackColor = Color::Red;
			MessageBox::Show("Right value less then left value!");
			return;
		}
	}
	tb->BackColor = Color::White;

	_params.Right = right;
}
};
}
