;вспомогательный макрос очистки регистров
macro clearRegistr [arg]
{
 xor arg, arg
}

format mz
org 100h

mov dx, msg_ent		;вывод строки
call printStr

scanStr:		;метка считывания строки
mov ah, 0ah		;функция считывания строки
mov byte[buff], 20	;максимальная длина строки 20 записывается в 1 байт
mov byte[buff+1], 0	;обнуляем второй байт для записи рельной длины строки
mov dx, buff		;сохраняем адрес
int 21h			;прерывание
mov si, dx		;копируем адрес
add si, 2		;запись строки начинается с 3 байта
mov cl, byte[buff+1]	;помещаем длину строки в регистр-счетчик
clearRegistr dx		;очищаем регистр

mov dx, endline		;переводим строку
call printStr
mov dx, msg_out		;выводим сообщение
call printStr

summ:			;метка суммирования ASCII кодов
clearRegistr ax		;очищаем регистр
lodsb			;забираем один символ из строки
add dx, ax		;в dx будет результат, поэтому прибавляем значение кода
loop summ		;повторяем столько раз, сколько символов в строке

mov ax, dx		;перемещаем результат в ах

output:			;метка перевода в нужную сс
clearRegistr dx		;очищаем регистр
mov bx, 10		;помещаем в регистр основание сс
div bx			;делим ах на 10
inc cx			;увеличиваем счетчик цифр
push dx			;сохраняем остаток в стек
test ax, ax		;сравниваем целое число с 0
jnz output		;если не ноль, повторяем выполнение метки

print:			;метка вывода результата
clearRegistr dx		;очищаем регистр
pop dx			;достаем число из стека
add dx, '0'		;переводим цифру из ASCII
mov ah, 02h		;функция вывода символа
int 21h			;прерывание
loop print		;повторяем сх раз
call exit		;переход к метке завершения программы

exit:			;метка завершения программы
mov ax, 4c00h		;функция завершения программы
int 21h			;прерывание

printStr:		;метка вывода строки
mov ah, 09h		;функция вывода строки
int 21h			;прерывание
clearRegistr ax, dx	;очистка использованныз регистров
ret

;переменные
buff: rb 22
msg_ent: db 'Entry string: $'
msg_out: db 'Sum of ASCII codes: $'
endline: db 13, 10, '$'
